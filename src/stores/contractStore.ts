import { create } from 'zustand';

export interface ContractParty {
  name: string;
  role: string;
  address?: string;
  jurisdiction?: string;
}

export interface ContractTerm {
  title: string;
  content: string;
  isAutoGenerated?: boolean;
}

export interface Contract {
  id: string;
  name: string;
  type: 'real-estate' | 'media-rights' | 'fine-art';
  template: string;
  parties: ContractParty[];
  terms: ContractTerm[];
  status: 'draft' | 'pending' | 'active' | 'completed';
  createdAt: Date;
  lastUpdated: Date;
  jurisdiction: string;
  governingLaw: string;
  language: string;
  isAIAssisted?: boolean;
}

interface ContractState {
  contracts: Contract[];
  createContract: (data: Omit<Contract, 'id' | 'status' | 'createdAt' | 'lastUpdated'>) => Promise<Contract>;
  getContractTemplates: () => Promise<{ id: string; name: string; type: Contract['type']; jurisdiction?: string }[]>;
  generateAITerms: (type: Contract['type'], jurisdiction: string) => Promise<ContractTerm[]>;
}

// Demo contracts with international context
const DEMO_CONTRACTS: Contract[] = [
  {
    id: 'contract-1',
    name: 'Manhattan Property Purchase',
    type: 'real-estate',
    template: 'real-estate-purchase',
    parties: [
      { name: 'John Smith', role: 'Seller', address: '0x1234...5678', jurisdiction: 'New York, USA' },
      { name: 'Alice Johnson', role: 'Buyer', address: '0x8765...4321', jurisdiction: 'New York, USA' },
    ],
    terms: [
      { title: 'Purchase Price', content: 'The agreed purchase price is $2,500,000 USD' },
      { title: 'Closing Date', content: 'The closing date shall be March 31, 2024' },
    ],
    status: 'active',
    createdAt: new Date('2024-02-15'),
    lastUpdated: new Date('2024-03-01'),
    jurisdiction: 'New York, USA',
    governingLaw: 'New York State Law',
    language: 'en-US',
    isAIAssisted: true,
  },
  {
    id: 'contract-2',
    name: 'European Media Distribution',
    type: 'media-rights',
    template: 'media-distribution',
    parties: [
      { name: 'Studio X', role: 'Rights Holder', address: '0x2468...1357', jurisdiction: 'France' },
      { name: 'Global Streaming Co', role: 'Distributor', address: '0x1357...2468', jurisdiction: 'Germany' },
    ],
    terms: [
      { title: 'Territory', content: 'European Union Member States' },
      { title: 'Duration', content: '5 years from the effective date' },
    ],
    status: 'pending',
    createdAt: new Date('2024-03-01'),
    lastUpdated: new Date('2024-03-10'),
    jurisdiction: 'European Union',
    governingLaw: 'EU Media Law',
    language: 'en-GB',
    isAIAssisted: true,
  },
];

// Simulated AI-generated terms based on jurisdiction
const AI_GENERATED_TERMS = {
  'real-estate': {
    'USA': [
      { title: 'Property Inspection', content: 'The buyer has the right to conduct a professional inspection...', isAutoGenerated: true },
      { title: 'Title Insurance', content: 'The seller shall provide a standard ALTA owner\'s policy...', isAutoGenerated: true },
    ],
    'UK': [
      { title: 'Freehold Transfer', content: 'The property shall be transferred with full title guarantee...', isAutoGenerated: true },
      { title: 'Land Registry', content: 'The buyer shall be responsible for registration with HM Land Registry...', isAutoGenerated: true },
    ],
  },
  'media-rights': {
    'USA': [
      { title: 'Copyright Compliance', content: 'All content must comply with US Copyright Law...', isAutoGenerated: true },
      { title: 'Distribution Rights', content: 'Exclusive rights for digital and broadcast distribution...', isAutoGenerated: true },
    ],
    'EU': [
      { title: 'GDPR Compliance', content: 'All data processing must comply with GDPR requirements...', isAutoGenerated: true },
      { title: 'Territory Rights', content: 'Rights extend to all EU member states...', isAutoGenerated: true },
    ],
  },
  'fine-art': {
    'USA': [
      { title: 'Authenticity', content: 'Seller guarantees the authenticity under US art law...', isAutoGenerated: true },
      { title: 'Provenance', content: 'Complete ownership history documentation required...', isAutoGenerated: true },
    ],
    'UK': [
      { title: 'Export License', content: 'Compliance with UK export regulations for cultural goods...', isAutoGenerated: true },
      { title: 'Artist\'s Resale Right', content: 'Subject to Artist\'s Resale Right (ARR)...', isAutoGenerated: true },
    ],
  },
};

export const useContractStore = create<ContractState>((set) => ({
  contracts: DEMO_CONTRACTS,
  createContract: async (data) => {
    const newContract: Contract = {
      ...data,
      id: `contract-${Date.now()}`,
      status: 'draft',
      createdAt: new Date(),
      lastUpdated: new Date(),
    };

    set((state) => ({
      contracts: [...state.contracts, newContract],
    }));

    return newContract;
  },
  getContractTemplates: async () => [
    { id: 'real-estate-purchase-us', name: 'US Real Estate Purchase Agreement', type: 'real-estate', jurisdiction: 'USA' },
    { id: 'real-estate-lease-uk', name: 'UK Property Lease Agreement', type: 'real-estate', jurisdiction: 'UK' },
    { id: 'media-distribution-us', name: 'US Media Distribution Rights', type: 'media-rights', jurisdiction: 'USA' },
    { id: 'media-licensing-eu', name: 'EU Media Licensing Agreement', type: 'media-rights', jurisdiction: 'EU' },
    { id: 'art-purchase-us', name: 'US Fine Art Purchase Agreement', type: 'fine-art', jurisdiction: 'USA' },
    { id: 'art-consignment-uk', name: 'UK Fine Art Consignment Agreement', type: 'fine-art', jurisdiction: 'UK' },
  ],
  generateAITerms: async (type, jurisdiction) => {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    return AI_GENERATED_TERMS[type]?.[jurisdiction] || [];
  },
}));